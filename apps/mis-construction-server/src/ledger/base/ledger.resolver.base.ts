/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ledger } from "./Ledger";
import { LedgerCountArgs } from "./LedgerCountArgs";
import { LedgerFindManyArgs } from "./LedgerFindManyArgs";
import { LedgerFindUniqueArgs } from "./LedgerFindUniqueArgs";
import { DeleteLedgerArgs } from "./DeleteLedgerArgs";
import { LedgerService } from "../ledger.service";
@graphql.Resolver(() => Ledger)
export class LedgerResolverBase {
  constructor(protected readonly service: LedgerService) {}

  async _ledgersMeta(
    @graphql.Args() args: LedgerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ledger])
  async ledgers(@graphql.Args() args: LedgerFindManyArgs): Promise<Ledger[]> {
    return this.service.ledgers(args);
  }

  @graphql.Query(() => Ledger, { nullable: true })
  async ledger(
    @graphql.Args() args: LedgerFindUniqueArgs
  ): Promise<Ledger | null> {
    const result = await this.service.ledger(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ledger)
  async deleteLedger(
    @graphql.Args() args: DeleteLedgerArgs
  ): Promise<Ledger | null> {
    try {
      return await this.service.deleteLedger(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
