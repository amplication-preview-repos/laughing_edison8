/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Site as PrismaSite } from "@prisma/client";

export class SiteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SiteCountArgs, "select">): Promise<number> {
    return this.prisma.site.count(args);
  }

  async sites<T extends Prisma.SiteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SiteFindManyArgs>
  ): Promise<PrismaSite[]> {
    return this.prisma.site.findMany<Prisma.SiteFindManyArgs>(args);
  }
  async site<T extends Prisma.SiteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SiteFindUniqueArgs>
  ): Promise<PrismaSite | null> {
    return this.prisma.site.findUnique(args);
  }
  async createSite<T extends Prisma.SiteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SiteCreateArgs>
  ): Promise<PrismaSite> {
    return this.prisma.site.create<T>(args);
  }
  async updateSite<T extends Prisma.SiteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SiteUpdateArgs>
  ): Promise<PrismaSite> {
    return this.prisma.site.update<T>(args);
  }
  async deleteSite<T extends Prisma.SiteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SiteDeleteArgs>
  ): Promise<PrismaSite> {
    return this.prisma.site.delete(args);
  }
}
