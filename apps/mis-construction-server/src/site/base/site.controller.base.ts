/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SiteService } from "../site.service";
import { SiteCreateInput } from "./SiteCreateInput";
import { Site } from "./Site";
import { SiteFindManyArgs } from "./SiteFindManyArgs";
import { SiteWhereUniqueInput } from "./SiteWhereUniqueInput";
import { SiteUpdateInput } from "./SiteUpdateInput";

export class SiteControllerBase {
  constructor(protected readonly service: SiteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Site })
  async createSite(@common.Body() data: SiteCreateInput): Promise<Site> {
    return await this.service.createSite({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Site] })
  @ApiNestedQuery(SiteFindManyArgs)
  async sites(@common.Req() request: Request): Promise<Site[]> {
    const args = plainToClass(SiteFindManyArgs, request.query);
    return this.service.sites({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Site })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async site(
    @common.Param() params: SiteWhereUniqueInput
  ): Promise<Site | null> {
    const result = await this.service.site({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Site })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSite(
    @common.Param() params: SiteWhereUniqueInput,
    @common.Body() data: SiteUpdateInput
  ): Promise<Site | null> {
    try {
      return await this.service.updateSite({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Site })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSite(
    @common.Param() params: SiteWhereUniqueInput
  ): Promise<Site | null> {
    try {
      return await this.service.deleteSite({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
